// app/styles/responsive.scss

// Ensure images and videos are responsive by default
img,
video {
  max-width: 100%;
  height: auto;
}

// Media queries for general mobile screens (up to md breakpoint / 768px)
@media (max-width: 768px) { // General mobile adjustments, including tablets in portrait
  html {
    font-size: 87.5%; // Scales 1rem from 16px to 14px, achieving ~85-87.5% reduction
  }

  // --- Max-Width Constraint for Main Content ---

  // 1. Adjust --chat-max-width for the main chat interface content
  // Original --chat-max-width is 37rem.
  // Target 414px. At 1rem = 14px (due to html font scaling), 414px is approx 29.5rem.
  // If content wrapper needs px-3 (0.75rem -> 10.5px at 1rem=14px) padding:
  // Max content width = 414px - (2 * 10.5px) = 393px.
  // 393px / 14px/rem = 28.07rem. Let's use 28rem for --chat-max-width.
  :root {
    --chat-max-width: 28rem; // Approx 392px content + padding makes it fit 414px
  }
  // And ensure elements using .max-w-chat have appropriate padding for mobile, e.g., px-3
  // This might require checking BaseChat.tsx again for the specific classes on elements using max-w-chat.
  // For now, changing the variable is the main goal. The padding is already responsive on those elements.

  // 2. Constrain ProfileTab.tsx content width
  // ProfileTab's main div has `max-w-2xl mx-auto px-2 sm:px-0`.
  // `max-w-2xl` (42rem) becomes 42 * 14 = 588px. Too wide.
  // We need to override this max-width.
  // The `px-2 sm:px-0` applies *outside* this max-width.
  // We want the content *within* ControlPanel's padding (which is p-3 on mobile)
  // to then have a max-width of 414px (including ProfileTab's own internal padding if any).
  // Let's target the ProfileTab main div specifically.
  // Assuming ProfileTab's root div might get a specific class or can be targeted if it's unique.
  // If ProfileTab's root element is just `<div className="max-w-2xl mx-auto px-2 sm:px-0">`
  :global(div[class*="max-w-2xl"][class*="mx-auto"]) { // Attempt to target ProfileTab's main div
    // On mobile, after html font scaling, 1rem=14px.
    // Target 414px. If it has internal padding (e.g. ProfileTab itself adds p-3),
    // then max-width should be 414px - (2 * padding_px).
    // ProfileTab's `space-y-4 sm:space-y-6` doesn't add horizontal padding to the root.
    // The `px-2` (0.5rem = 7px at 1rem=14px) on the ProfileTab root
    // will apply outside this max-width, ensuring it doesn't touch edges if viewport is < 413px + 14px.
    max-width: 29.5rem; // Approx 413px
  }

  // Reduce header padding. The header element in Header.tsx has classes "flex items-center p-5".
  // We need a selector specific enough to target it without being overly fragile.
  // Assuming the <header> tag is unique enough or has a specific parent if needed.
  // For now, targeting based on its current classes and tag.
  body > div#root > header.flex.items-center.p-5, // More specific if #root is the immediate parent in final DOM
  header.p-5.border-b { // A common pattern for headers
    padding-left: 1rem;   // Was p-5 (1.25rem) -> px-4
    padding-right: 1rem;  // Was p-5 (1.25rem) -> px-4
    padding-top: 0.75rem;    // Was p-5 (1.25rem) -> py-3
    padding-bottom: 0.75rem; // Was p-5 (1.25rem) -> py-3
  }

  /* Assuming .MarkdownContent is globally available or this file is processed in a way that allows targeting it */
  :global(.MarkdownContent) { // Use :global if needed, or adjust selector if MarkdownContent is hashed by CSS Modules build
    line-height: 1.5;

    > *:not(:last-child) {
      margin-block-end: 12px;
    }

    :is(h1, h2, h3, h4, h5, h6) {
      margin-block-start: 18px;
      margin-block-end: 12px;
      line-height: 1.2;
    }

    p:not(:last-of-type) {
      margin-block-end: 12px;
    }

    :is(ul, ol) {
      margin-block-end: 12px;
      padding-left: 1.5em;
    }

    li + li {
      margin-block-start: 6px;
    }

    hr {
      margin: 16px 0;
    }
  }

  // Settings Page - ProfileTab Avatar
  // Targets the avatar container: <div class="w-24 h-24 ...">
  :global(.dark) :global(.w-24.h-24.rounded-full.overflow-hidden.bg-gray-800\/50),
  :global(.w-24.h-24.rounded-full.overflow-hidden.bg-gray-100) {
    width: 4rem; // equivalent to w-16
    height: 4rem; // equivalent to h-16
  }

  // Targets the placeholder icon: <div class="i-ph:robot-fill w-16 h-16 ...">
  :global(.dark) :global(.i-ph\:robot-fill.w-16.h-16.text-gray-500),
  :global(.i-ph\:robot-fill.w-16.h-16.text-gray-400) {
    width: 3rem; // equivalent to w-12
    height: 3rem; // equivalent to h-12
  }

  // Targets the camera upload icon on hover: <div class="i-ph:camera-plus w-6 h-6 ...">
  // This might already be small enough (1.5rem), but if consistent scaling is applied:
  :global(.group:hover .i-ph\:camera-plus.w-6.h-6) {
    width: 1.25rem; // equivalent to w-5
    height: 1.25rem; // equivalent to h-5
  }

  // Target inputs and textareas styled like those in ProfileTab.tsx
  // These have large left padding for an icon (pl-11) and generous vertical padding (py-2.5)
  // Assumes these specific padding classes are primary identifiers.
  :global(input.pl-11.pr-4.py-2\.5), // Escaped dot for py-2.5
  :global(textarea.pl-11.pr-4.py-2\.5) {
    padding-top: 0.5rem;    // py-2
    padding-bottom: 0.5rem; // py-2
    padding-left: 2rem;     // pl-8 (assuming inner icon also scales slightly or needs less space)
    padding-right: 0.75rem; // pr-3
    font-size: 0.875rem; // text-sm
  }

  :global(textarea.pl-11.pr-4.py-2\.5.h-32) { // Specifically target the textarea height
    height: 6rem; // h-24 (reduced from h-32)
  }

  // For standard select elements (like in SettingsTab.tsx: px-3 py-2 text-sm)
  // These are already quite compact. We ensure they don't become larger.
  // If they were larger, rules similar to inputs would apply.
  // For now, just a comment placeholder, as their existing style is likely fine.
  // :global(select.px-3.py-2.text-sm) {
  //   // font-size: 0.875rem; // already text-sm
  //   // padding: 0.375rem 0.625rem; // slightly less than py-2 px-3 if needed
  // }

  // Application Header Title (from Header.tsx, originally text-2xl)
  // Attempting to target the span holding "Application Title"
  // This selector assumes the structure `header > div > a > span`
  // and the specific classes on the header.
  :global(header.p-5.border-b div.flex.items-center.gap-2 a span) {
    font-size: 1.25rem; // text-xl equivalent
  }

  // Dialog Titles (from Dialog.tsx, originally text-lg via DialogTitle component)
  // Targeting the specific classes applied by the DialogTitle component.
  // This selector is based on: classNames('text-lg font-medium text-bolt-elements-textPrimary ...')
  // It's brittle. A custom class on DialogTitle would be better.
  :global(h2[class*="text-lg"][class*="font-medium"][class*="text-bolt-elements-textPrimary"]) {
    // font-size: 1rem; // Removed to allow root font scaling for text-lg
    // Ensure line-height adjusts if it was fixed or too large
    line-height: 1.4; // Example, adjust as needed
  }

  // --- Ensure Tappable Areas for Buttons & Forms after root font scaling ---
  // html { font-size: 87.5%; } is already at the top of this media query.
  // Now, 1rem = 14px. Target height ~40px => ~2.85rem.
  // For text-sm (0.875rem = 12.25px), padding needed per side is (40-12.25)/2 = ~13.875px => ~1rem at new scale.

  // Buttons:
  // Default buttons (h-9 px-4 py-2, text-sm in CVA)
  // Small buttons (h-8 px-3, text-xs in CVA)
  // Large buttons (h-10 px-8, text-sm default in CVA)
  // We aim for a consistent touch height.
  // Overriding CVA-generated classes for height and padding.
  // This applies to <button> elements matching these common CVA size patterns.
  :global(button[class*="h-8"][class*="text-xs"]), // targets size="sm"
  :global(button[class*="h-9"][class*="text-sm"]), // targets size="default"
  :global(button[class*="h-10"][class*="text-sm"]) { // targets size="lg" (assuming text-sm if not specified)
    min-height: 2.8rem; // Approx 39.2px
    padding-top: 0.5rem;    // Keep some base padding from CVA like py-2 (0.5rem now 7px)
    padding-bottom: 0.5rem; // and let min-height ensure the total.
                            // More direct: if text-sm is 0.875rem (12.25px),
                            // then py should be (2.8rem - 0.875rem)/2 = ~0.96rem.
                            // So, py-3.5 (0.875rem) or py-4 (1rem) would be better.
    padding-top: 0.9rem;    // Revised for direct height contribution
    padding-bottom: 0.9rem; // Revised for direct height contribution
    // Horizontal padding (px-3, px-4, px-8 from CVA) will also scale with rem if defined in rem.
    // px-3 (0.75rem) -> 10.5px
    // px-4 (1rem)   -> 14px
    // px-8 (2rem)   -> 28px. This px-8 for lg buttons is very large for mobile.
  }

  // Specifically for lg buttons, reduce horizontal padding on mobile
  :global(button[class*="h-10"][class*="px-8"]) { // targets size="lg"
    padding-left: 1rem;  // px-4 equivalent (14px)
    padding-right: 1rem; // px-4 equivalent (14px)
  }

  // Inputs and Selects:
  // Targeting inputs/textareas like in ProfileTab and standard selects.
  // Previous rules set py-2.5 (0.625rem) which is now 8.75px. Font is text-sm (12.25px). Height ~30px.
  // Need to increase py to hit ~40px total height.
  :global(input.pl-11.pr-4), // ProfileTab style inputs
  :global(textarea.pl-11.pr-4),
  :global(select[class*="px-3"][class*="py-2"][class*="text-sm"]) { // Standard select
    padding-top: 0.9rem;    // Target ~12.5px-14px padding (at 1rem=14px)
    padding-bottom: 0.9rem; // This makes total height with text-sm (~12px) around 12+12.5+12.5 = ~37px + borders.
                           // Let's use 1rem for ~40px
    padding-top: 1rem;      // Approx 14px
    padding-bottom: 1rem;   // Approx 14px
    // Ensure font size is consistently text-sm for these inputs on mobile
    font-size: 0.875rem; // text-sm (12.25px)
  }
  // Remove more specific padding overrides that might conflict from previous steps if they are too small
  // This is tricky; ideally, prior overrides would be removed or updated.
  // For now, these new general rules should take precedence if more specific or !important is not used elsewhere.

  // Switch component:
  // Original h-6 (1.5rem) is now 21px. This is small.
  // Let's make it slightly larger to improve tappability if it's standalone.
  // If it's always part of a larger tappable row, this might not be needed.
  // For now, keeping it as scaled by root font, as it's often in a row with a label.
  // :global([role="switch"][class*="w-11"][class*="h-6"]) {
  //   min-height: 1.75rem; // ~24.5px
  // }
  // :global([role="switch"][class*="w-11"][class*="h-6"] > span) { // Thumb
  //   min-height: 1.25rem; // Keep thumb size relative to its track
  //   min-width: 1.25rem;
  // }

  // BaseChat.tsx textarea (has class .w-full .pl-3 .pt-3 etc.)
  // Using a more stable part of its class or an added ID would be better.
  // For now, assuming it's the primary textarea in its context.
  :global(textarea[aria-label*="Chat input"]) { // Targeting via its ARIA label
    min-height: 60px !important; // Override JS variable if possible
  }
// End of @media (max-width: 768px) block
}

// For very small screens (e.g., iPhone SE - 320px, and up to ~425px)
@media (max-width: 425px) {
  body > div#root > header.flex.items-center.p-5,
  header.p-5.border-b {
    padding-left: 0.75rem;   // px-3
    padding-right: 0.75rem;  // px-3
    padding-top: 0.5rem;     // py-2
    padding-bottom: 0.5rem;  // py-2
  }

  // Placeholder for other very-small-screen adjustments
  // .mobile-padding-adjustment {
  //   padding-left: 0.5rem;
  //   padding-right: 0.5rem;
  // }

  :global(.MarkdownContent) { // Use :global if needed
    line-height: 1.45;

    > *:not(:last-child) {
      margin-block-end: 8px; // MODIFIED
    }

    :is(h1, h2, h3, h4, h5, h6) {
      margin-block-start: 12px; // MODIFIED
      margin-block-end: 8px; // MODIFIED
      line-height: 1.15;
    }

    p:not(:last-of-type) {
      margin-block-end: 8px; // MODIFIED
    }

    :is(ul, ol) {
      margin-block-end: 10px;
      padding-left: 1.25em;
    }

    li + li {
      margin-block-start: 4px;
    }

    hr {
      margin: 10px 0; // MODIFIED
    }
  }

  // Settings Page - ProfileTab Avatar
  :global(.dark) :global(.w-24.h-24.rounded-full.overflow-hidden.bg-gray-800\/50),
  :global(.w-24.h-24.rounded-full.overflow-hidden.bg-gray-100) {
    width: 3.5rem; // equivalent to w-14
    height: 3.5rem; // equivalent to h-14
  }

  // Placeholder icon inside avatar
  :global(.dark) :global(.i-ph\:robot-fill.w-16.h-16.text-gray-500),
  :global(.i-ph\:robot-fill.w-16.h-16.text-gray-400) {
    width: 2.5rem; // equivalent to w-10
    height: 2.5rem; // equivalent to h-10
  }

  // Camera upload icon on hover
  :global(.group:hover .i-ph\:camera-plus.w-6.h-6) {
    width: 1.125rem; // text-lg equivalent, smaller than w-5
    height: 1.125rem;
  }

  // :global(input.pl-11.pr-4.py-2\.5), // Commented out as 768px rules should handle this now
  // :global(textarea.pl-11.pr-4.py-2\.5) {
  //   padding-top: 0.375rem;    // py-1.5
  //   padding-bottom: 0.375rem; // py-1.5
  //   padding-left: 1.75rem;   // pl-7 (further reduction for icon space)
  //   padding-right: 0.5rem;   // pr-2
  //   // font-size: 0.875rem; // text-sm (already set above)
  // }

  // :global(textarea.pl-11.pr-4.py-2\.5.h-32) { // Commented out as 768px rules should handle this now
  //   height: 5rem; // h-20
  // }

  // Switch component scaling (original: h-6 w-11, thumb: h-5 w-5)
  // Targeting Radix UI structure if direct classes are not stable
  // These rules for 425px were making switch smaller (h-5).
  // The 768px rules now aim to keep switch at h-6.
  // So, these specific 425px overrides for switch size are removed to let 768px rules apply,
  // unless a *further different* scaling is needed for very small screens.
  // For now, assume 768px switch styling is adequate for <425px too.
  // :global([role="switch"][class*="h-6"][class*="w-11"]) {
  //   width: 2.5rem;  // w-10
  //   height: 1.25rem; // h-5
  // }
  // :global([role="switch"][class*="h-6"][class*="w-11"] > span[class*="h-5"][class*="w-5"]) { // Thumb
  //   width: 1rem;     // w-4
  //   height: 1rem;    // h-4
  // }
  // :global([role="switch"][class*="h-6"][class*="w-11"] > span[class*="h-5"][class*="w-5"][data-state="checked"]) {
  //   transform: translateX(1.125rem);
  // }
  //  :global([role="switch"][class*="h-6"][class*="w-11"] > span[class**="h-5"][class*="w-5"][data-state="unchecked"]) {
  //   transform: translateX(0.125rem);
  // }

  // Application Header Title
  :global(header.p-5.border-b div.flex.items-center.gap-2 a span) {
    font-size: 1.125rem; // text-lg equivalent
  }

  // Dialog Titles
  :global(h2[class*="text-lg"][class*="font-medium"][class*="text-bolt-elements-textPrimary"]) {
    // font-size: 0.875rem; // Removed to allow root font scaling for text-lg
    line-height: 1.3; // Example
  }

  // Further ensure tappable heights for inputs on very small screens if needed
  :global(input.pl-11.pr-4),
  :global(textarea.pl-11.pr-4),
  :global(select[class*="px-3"][class*="py-2"][class*="text-sm"]) {
    // font-size: 0.875rem; // text-sm
    // padding-top: 0.625rem; // py-2.5 already set by 768px rules
    // padding-bottom: 0.625rem; // py-2.5 already set by 768px rules
  }

  // If small buttons (h-8 / 32px default) are still too small, increase their padding more.
  // The 768px rule already sets min-height: 2.8rem and py: 0.9rem.
  // This rule for 425px re-asserts min-height: 2.5rem. If 2.8rem is desired, this can be removed.
  // For consistency with prompt, keeping this specific 425px rule.
  :global(button[class*="h-8"][class*="px-3"]) {
    min-height: 2.5rem; // h-10 (40px)
    // padding-top: 0.75rem; // py-3 (if h-10 means 2.5rem total height)
    // padding-bottom: 0.75rem; // py-3
  }

  :global(textarea[aria-label*="Chat input"]) {
    min-height: 50px !important;
  }
}
